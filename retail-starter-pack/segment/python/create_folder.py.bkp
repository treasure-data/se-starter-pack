import json
import pandas as pd
import python.td as td
import python.api.folder as api
import python.helper.utils as u
import python.helper.global_var as g

df_log = pd.DataFrame()
logs = []

def getFolderRootID(audienceId):
  df_folder,status = api.getFolders(audienceId)
  if df_folder is not None:
    df_folder = df_folder[df_folder['parentFolderId'] == '0']
    return df_folder['id'].values[0],'ok'
  else:
    return None, status


def getAllObjects(audience_id):
  rootFolderId,status = getFolderRootID(audience_id)
  if rootFolderId is not None:
    df_objects,message = api.getObjectsFolder(rootFolderId)
    if df_objects is not None:
      df_objects = calculate_folder_data(df_objects)
      return df_objects,'ok'
    else:
      return None,message
  else:
    return None,status   


def getSubFolders(folder_id):
  all_objects = api.getObjectsFolder(folder_id)
  all_folders = all_objects[all_objects['type'] == 'folder-segment']
  return all_folders


def checkFolderExists(folder_name, folders):
  if folders.empty:
    return None
  match = folders[folders['name'] == folder_name]
  return match['id'].iat[0] if not match['id'].empty else None

def add_parent_columns(df):
    # Extracting parent folder path
    df['parentFolderPath'] = df['folderPath'].str.rsplit('/', 1).str[0]
    
    
    # Handle the case where there isn't a '/', which means we're at the root
    df['parentFolderPath'] = df['parentFolderPath'].where(df['folderPath'].str.contains('/'), 'ROOT')
    
    # Extracting parent folder name
    df['parentFolderName'] = df['parentFolderPath'].str.rsplit('/', 1).str[-1]
    
    # Computing parent level
    df['parentLevel'] = df['level'] - 1
    
    return df

def get_new_parent_folder_id(df_main, df_left):
  df_main.loc[df_main['level'] == 0, 'name'] = 'ROOT'
  df_left.loc[df_left['level'] == 0, 'name'] = 'ROOT'
  # Left join
  result = df_main.merge(df_left, 
                          left_on=['parentFolderName', 'parentFolderPath', 'parentLevel'], 
                          right_on=['name', 'folderPath', 'level'],
                          how='left', 
                          suffixes=('', '_left'))

  # Rename the 'id_left' column to 'new_parentFolderId'
  result.rename(columns={'id_left': 'new_parentFolderId'}, inplace=True)

  # Retain only the columns from df_main and 'new_parentFolderId'
  result = result[df_main.columns.tolist() + ['new_parentFolderId']]

  return result

def get_new_id(df_main, df_left):
  df_main.loc[df_main['level'] == 0, 'name'] = 'ROOT'
  df_left.loc[df_left['level'] == 0, 'name'] = 'ROOT'
  # Left join
  result = df_main.merge(df_left, 
                          left_on=['name', 'folderPath', 'level'], 
                          right_on=['name', 'folderPath', 'level'],
                          how='left', 
                          suffixes=('', '_left'))

  # Rename the 'id_left' column to 'new_id'
  result.rename(columns={'id_left': 'new_id'}, inplace=True)

  # Retain only the columns from df_main and 'new_id'
  result = result[df_main.columns.tolist() + ['new_id']]

  return result

def create_folder_struct(df_template_folder, df_ps_folder, folder_dict, template_folder_id, ps_folder_id):
  sub_template_folders = df_template_folder[df_template_folder['parentFolderId'] == template_folder_id]
  # print("sub_template_folders:")
  # print(sub_template_folders)

  if sub_template_folders.empty:
      df_log['status'] = ['created']
      return

  sub_ps_folders = df_ps_folder[df_ps_folder['parentFolderId'] == ps_folder_id]
  # print("sub_ps_folders")
  # print(sub_ps_folders)

  for index, folder in sub_template_folders.iterrows():
      ps_id = checkFolderExists(folder['name'], sub_ps_folders)
      if ps_id:
          folder_dict[folder['id']] = ps_id
          df_log['status'] = ["exist"]
          create_folder_struct(df_template_folder, df_ps_folder, folder_dict, folder['id'], ps_id)
      else:
          folder_dict_temp = folder.to_dict()
          folder_dict_temp['parentFolderId'] = ps_folder_id
          folder_df = pd.DataFrame(folder_dict_temp, index=[0])
          return_folder_id, message = api.createFolder(folder_df)
          df_log['status'] = [message]
          if return_folder_id is None:
            return
          folder_dict[folder['id']] = return_folder_id
          create_folder_struct(df_template_folder, df_ps_folder, folder_dict, folder['id'], return_folder_id)
  


def create_folders_with_root(df_template_folder, df_ps_folder, folder_dict):
  # Get root folders
  template_root_folder = df_template_folder.loc[df_template_folder['parentFolderId'] == '0']
  ps_root_folder = df_ps_folder.loc[df_ps_folder['parentFolderId'] == '0']

  # Error handling if no root folder is found
  if template_root_folder.empty or ps_root_folder.empty:
      print('Root folder not found')
      df_log['status'] = ['Root folder not found']

  # Rename PS root folde
  # if ps_root_folder['name'].iat[0] != template_root_folder['name'].iat[0]:
  #   ps_root_folder['name'] = template_root_folder['name'].iat[0]
  #   renameFolder(ps_root_folder)
  
  template_root_folder_id = template_root_folder['id'].iat[0]
  ps_root_folder_id = ps_root_folder['id'].iat[0]
  folder_dict[template_root_folder_id] = ps_root_folder_id

  create_folder_struct(df_template_folder, df_ps_folder, folder_dict, template_root_folder_id, ps_root_folder_id)



def create_folders_with_no_root(folder, folder_dict, df_template_folders, df_ps_folders):
  df_template_folder =  u.filter_by_folder_and_level(df_template_folders, folder)
  print("create_folders_with_no_root:")
  print(df_template_folder)
  
  if folder['id'] in folder_dict:
    print("Already created")
    df_log['status'] = ["created"]
    df_ps_folder = getSubFolders(folder_dict[folder['id']])
    create_folder_struct(df_template_folder, df_ps_folder, folder_dict, folder['id'], folder_dict[folder['id']])
    return  
    
  if folder['new_id'] != 'None':
    print('Already exists!')
    df_log['status'] = ["exist"]
    folder_dict[folder['id']] = folder['new_id']
    df_ps_folder = getSubFolders(folder['new_id'])
    create_folder_struct(df_template_folder, df_ps_folder, folder_dict, folder['id'], folder['new_id'])
  else:
    if folder['new_parentFolderId'] != 'None':
      folder_df = pd.DataFrame()
      folder_df['parentFolderId'] = [folder['new_parentFolderId']]
      folder_df['id'] = [folder['id']]
      folder_df['description'] = [folder['description']]
      folder_df['name'] = [folder['name']]
      return_folder_id, message = api.createFolder(folder_df)
      df_log['status'] = [message]
      if return_folder_id is None:
        return
      folder_dict[folder['id']] = return_folder_id
      df_ps_folder = getSubFolders(return_folder_id)
      create_folder_struct(df_template_folder, df_ps_folder, folder_dict, folder['id'], return_folder_id)
    else:
      print("The parent folder doesn't exist!")
      df_log['status'] = ["The parent folder doesn't exist!"]

def logFolderCreation(audience_id, parent_segment_name, log_dict, status):

  df = pd.DataFrame()
  df['audience_id'] = [audience_id]
  df['parent_segment_name'] = [parent_segment_name]
  df['log_dict'] = [json.dumps(log_dict)]
  df['status'] = [status]
  df['copy_time'] = [g.formatted_time]
  return df


# def main(yaml_file_path, log_table, level, template_audience_id):
def main(yaml_file_path, log_table, audience_id):
  # print(f'********************************PEFORMING A BULK COPY FOLDERS:****************************')
  global df_log

  #get config folders
  df_copy_folders = u.convert_yaml_file_to_df(yaml_file_path, 'include')
  df_copy_folders.fillna(value="None", inplace=True)
  print('df_copy_folders:')
  print(df_copy_folders)

  #get template folders
  df_template_folder, status = api.getFolders(audience_id)
  if df_template_folder is None:
    raise ValueError(status)
    return
  
  # df_template_folder = u.calculate_folder_data(df_template_folder)
  print('df_template_folder')
  print(df_template_folder)

  #merge template and config
  merged_df = u.left_merge(df_copy_folders, df_template_folder)
  merged_df = merged_df[merged_df['id'] != "None"]
  if merged_df.empty:
    raise ValueError("The config folders cannot be found!")
    return
  
  merged_df = add_parent_columns(merged_df)

  # all_ps = td.getLookupEntries(level)
  # if all_ps.empty:
  #   return 
  
  check_exist_root = merged_df[(merged_df['name'] == 'ROOT') & (merged_df['level'] == 0)].any().any()
  print('check_exist_root')
  print(check_exist_root)
  # for ps in all_ps.itertuples():
  #   print(f"*********COPY:{ps.parent_segment_name}**************")

  #   df_ps_folder, status = api.getFolders(ps.audience_id)

  #   df_log['rollup_id'] = [ps.rollup_id]
  #   df_log['rollup_name'] = [ps.rollup_name]
  #   df_log['audience_id'] = [ps.audience_id]
  #   df_log['parent_segment_name'] = [ps.parent_segment_name]
  #   df_log['audience_id'] = [template_audience_id]

  #   if df_ps_folder is None:
  #     df_log['status'] = [status]
  #   else:
  #     df_ps_folder = u.calculate_folder_data(df_ps_folder)
  #     print("df_ps_folder:")
  #     print(df_ps_folder[['name','level','folderPath']])

  #     if check_exist_root:
  #       print('*****create folder:ROOT,folderPath:ROOT')
  #       folder_dict = {}
  #       df_log['folder'] = ['ROOT']
  #       df_log['folderPath'] = ['ROOT']
  #       create_folders_with_root(df_template_folder, df_ps_folder, folder_dict)

  #       print(f'folder_dict : {folder_dict}')
  #       df_log['folder_dict'] = [folder_dict]

  #     else:
  #       df_final_folders = get_new_parent_folder_id(merged_df, df_ps_folder)
  #       df_final_folders = get_new_id(df_final_folders, df_ps_folder)
  #       df_final_folders = df_final_folders.sort_values(by='new_parentFolderId', ascending=True, na_position='last')
  #       df_final_folders.fillna(value="None", inplace=True)
  #       print("df_final_folders:")
  #       print(df_final_folders[['name', 'new_id', 'new_parentFolderId']])

  #       for _,folder in df_final_folders.iterrows():
  #         print(f'*****create folder:{folder["name"]},folderPath:{folder["folderPath"]}')
  #         folder_dict = {}
  #         df_log['folder'] = [folder["name"]]
  #         df_log['folderPath'] = [folder["folderPath"]]
  #         create_folders_with_no_root(folder, folder_dict, df_template_folder, df_ps_folder)

  #         print(f'folder_dict : {folder_dict}')
  #         df_log['folder_dict'] = [folder_dict]
    
  #   df_log['running_time'] = [g.formatted_time]
  #   df_log_new = df_log.copy()
  #   logs.append(df_log_new)
  #   df_log = pd.DataFrame()

  # df_logs = pd.concat(logs)
  # td.uploadDataToTD(df_logs, f'{g.db_logging}', log_table)
  
  # df_not_success = df_logs[~df_logs['status'].isin(['created', 'exist'])]
  # # df_not_success = df_not_success[['name','folderPath', 'status']]
  # if df_not_success.empty:
  #   print("The workflow run successfully")
  #   print(df_logs)
  # else:
  #   print(df_not_success)
  #   raise ValueError("The workflow failed, please check the log table")
